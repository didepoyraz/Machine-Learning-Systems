Traceback (most recent call last):
  File "/home/s2244487/Machine-Learning-Systems/task-1/task.py", line 612, in <module>
  File "/home/s2244487/Machine-Learning-Systems/task-1/task.py", line 591, in test_kmeans_1m
    print(f"GPU Time (1m): {gpu_time:.6f} seconds")
  File "/home/s2244487/Machine-Learning-Systems/task-1/task.py", line 421, in measure_time
    if torch.cuda.is_available():
  File "/home/s2244487/Machine-Learning-Systems/task-1/task.py", line 249, in our_kmeans
    distances = torch.sum((batch[:,None] - init_centroids_d)**2, dim=2)
  File "/home/s2244487/.conda/envs/mlsys/lib/python3.10/site-packages/torch/_tensor.py", line 39, in wrapped
    return f(*args, **kwargs)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.24 GiB. GPU 0 has a total capacity of 5.92 GiB of which 529.44 MiB is free. Including non-PyTorch memory, this process has 5.40 GiB memory in use. Of the allocated memory 3.02 GiB is allocated by PyTorch, and 2.29 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
